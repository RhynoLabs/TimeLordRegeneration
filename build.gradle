plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
}

apply from: 'versioning.gradle'

version = getCurrentVersion()
group = project.maven_group

base {
	archivesName = project.archives_base_name
}

repositories {
	// Prioritize JitPack for GitHub dependencies
	maven {
		name = "JitPack"
		url = "https://jitpack.io"
		content {
			includeGroup "com.github.amblelabs"
		}
	}

	maven { url = "https://maven.fabricmc.net/" }

	mavenCentral()


	// theo
	maven { url "https://theo.is-a.dev/maven/" }

	// YACL
	maven { url 'https://maven.isxander.dev/releases' }

	// origins stuff
	maven {
		name = "Ladysnake Libs"
		url = 'https://maven.ladysnake.org/releases'
	}
	maven {
		url = 'https://maven.cafeteria.dev'
		content {
			includeGroup 'net.adriantodt.fabricmc'
		}
	}
	maven {
		url "https://maven.jamieswhiteshirt.com/libs-release"
		content {
			includeGroup "com.jamieswhiteshirt"
		}
	}
	maven {
		url "https://maven.shedaniel.me/"
	}
	maven {
		url "https://maven.terraformersmc.com/"
	}
}

dependencies {
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

	// amblekit
	modImplementation "com.github.amblelabs:modkit:${project.use_amblekit_dev ? project.amblekit_dev_version : project.amblekit_version}"

	// ait compat
	modCompileOnlyApi "com.github.amblelabs:ait:${project.ait_version}"

	// getter setter
	compileOnly 'org.projectlombok:lombok:1.18.34'
	annotationProcessor 'org.projectlombok:lombok:1.18.34'
	testCompileOnly 'org.projectlombok:lombok:1.18.34'
	testAnnotationProcessor 'org.projectlombok:lombok:1.18.34'

	// theo
	modImplementation "dev.drtheo:multidim:${project.multidim_version}"
	modImplementation "dev.drtheo:scheduler:${project.scheduler_version}"
	modImplementation "dev.drtheo:queue:${project.queue_version}"

	// yacl
	modImplementation "dev.isxander:yet-another-config-lib:${project.yacl_version}"

	// origins
	modCompileOnlyApi "com.github.apace100:origins-fabric:${project.origins_version}"
	modApi "com.github.apace100:apoli:v${project.apoli_version}"
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-base:${cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("dev.onyxstudios.cardinal-components-api:cardinal-components-entity:${cca_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.clothconfig_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}

	// other
	include(implementation "net.objecthunter:exp4j:0.4.8")
}

configurations.all {
    resolutionStrategy {
        force "com.github.amblelabs:modkit:${project.use_amblekit_dev ? project.amblekit_dev_version : project.amblekit_version}"
    }
}

loom {
	// accessWidenerPath = file("src/main/resources/timelordregen.accesswidener")

	runs {
		datagen {
			inherit server
			name "Data Generation"
			vmArg "-Dfabric-api.datagen"
			vmArg "-Dfabric-api.datagen.output-dir=${file("src/main/generated")}"
			vmArg "-Dfabric-api.datagen.modid=timelordregen"

			runDir "build/datagen"
		}
	}

	mods {
		modid {
			sourceSet sourceSets.main
		}
	}
}

// Add the generated resources to the main source set
sourceSets {
	main {
		resources {
			srcDirs += [
					"src/main/generated"
			]
		}
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	inputs.property "archivesName", project.base.archivesName

	// needed because inputs.properties.archivesName is not accessible configuration time
	def archivesNameValue = project.base.archivesName

	from("LICENSE") {
		rename { "${it}_${archivesNameValue.get()}" }
	}
}